openapi: 3.1.0
info:
  title: Strataforge API Documentation 
  description: API for the Strataforge, a web3 platform for early stage founders 
  version: 1.0.0
  contact:
    email: support@web3propertyplatform.com
servers:
  - url: https://strataforge.buyinbytes.com/api
    description: Production Server (Namecheap)
  - url: http://localhost:8000/api
    description: Development Server

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        walletAddress:
          type: string
          example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [user, owner, admin]
          example: "user"
        verificationStatus:
          type: string
          enum: [pending, verified]
          example: "pending"
        createdAt:
          type: string
          format: date-time
          example: "2023-11-15T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-11-15T08:30:00Z"

    Token:
      type: object
      properties:
        tokenId:
          type: string
          example: "1"
        name:
          type: string
          example: "CryptoPunk Token"
        symbol:
          type: string
          example: "CPT"
        type:
          type: string
          enum: [ERC-20, ERC-721, ERC-1155, Memecoin, Stablecoin]
          example: "ERC-721"
        supply:
          type: string
          example: "10,000"
        price:
          type: string
          example: "$2,500"
        address:
          type: string
          example: "0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b"
        network:
          type: string
          example: "Ethereum"
        description:
          type: string
          example: "A collection of unique digital art tokens"
        features:
          type: array
          items:
            type: string
          example: ["Royalty support", "Metadata included", "Marketplace ready"]
        logoUrl:
          type: string
          example: "/uploads/logo-123.png"
        backgroundUrl:
          type: string
          example: "/uploads/background-456.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2023-11-15T08:30:00Z"

    Project:
      type: object
      properties:
        _id:
          type: string
          example: "64f8b5c2d4e1a2b3c4d5e6f7"
        name:
          type: string
          example: "CryptoPunk Project"
        symbol:
          type: string
          example: "CPP"
        description:
          type: string
          example: "A revolutionary NFT project"
        whitepaper:
          type: string
          example: "https://example.com/whitepaper.pdf"
        website:
          type: string
          example: "https://cryptopunk.com"
        twitter:
          type: string
          example: "https://twitter.com/cryptopunk"
        telegram:
          type: string
          example: "https://t.me/cryptopunk"
        discord:
          type: string
          example: "https://discord.gg/cryptopunk"
        logoUrl:
          type: string
          example: "/uploads/project-logo-123.png"
        bannerUrl:
          type: string
          example: "/uploads/project-banner-456.jpg"
        category:
          type: string
          enum: [DeFi, NFT, GameFi, Infrastructure, Metaverse, Other]
          example: "NFT"
        status:
          type: string
          enum: [draft, active, completed, paused]
          example: "active"
        creator:
          $ref: '#/components/schemas/User'
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/Token'
        totalSupply:
          type: string
          example: "1000000"
        marketCap:
          type: string
          example: "$10000000"
        launchDate:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        tags:
          type: array
          items:
            type: string
          example: ["nft", "blockchain", "art"]
        createdAt:
          type: string
          format: date-time
          example: "2023-11-15T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-11-15T08:30:00Z"

    ProjectOption:
      type: object
      properties:
        id:
          type: string
          example: "64f8b5c2d4e1a2b3c4d5e6f7"
        name:
          type: string
          example: "CryptoPunk Project"
        symbol:
          type: string
          example: "CPP"
        label:
          type: string
          example: "CryptoPunk Project (CPP)"
    
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"
        data:
          type: object
        statusCode:
          type: integer
          example: 200

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        statusCode:
          type: integer
          example: 400

    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 50
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        pages:
          type: integer
          example: 5

paths:
  /auth/register:
    post:
      summary: Register a new user with wallet address (minimal info)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletAddress
                - name
                - email
              properties:
                walletAddress:
                  type: string
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                role:
                  type: string
                  enum: [user, owner, admin]
                  example: "user"
      responses:
        '201':
          description: User registered successfully and OTP sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              walletAddress:
                                type: string
                              name:
                                type: string
                              email:
                                type: string
                              role:
                                type: string
                              verificationStatus:
                                type: string
                          token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-email:
    post:
      summary: Verify user email with OTP
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              walletAddress:
                                type: string
                              name:
                                type: string
                              email:
                                type: string
                              role:
                                type: string
                              verificationStatus:
                                type: string
                          token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Invalid OTP or expired OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/resend-otp:
    post:
      summary: Resend OTP for email verification
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
      responses:
        '200':
          description: OTP resent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
           
  /auth/login:
    post:
      summary: Login with wallet address
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletAddress
              properties:
                walletAddress:
                  type: string
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              walletAddress:
                                type: string
                              name:
                                type: string
                              email:
                                type: string
                              role:
                                type: string
                              verificationStatus:
                                type: string
                          token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # PROJECT ENDPOINTS
  /projects:
    get:
      summary: Get all projects with pagination and filtering (public)
      tags:
        - Projects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 12
          description: Items per page
        - name: category
          in: query
          schema:
            type: string
            enum: [DeFi, NFT, GameFi, Infrastructure, Metaverse, Other]
          description: Filter by category
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, completed, paused]
          description: Filter by status
        - name: search
          in: query
          schema:
            type: string
          description: Search in project name, description, and tags
        - name: creator
          in: query
          schema:
            type: string
          description: Filter by creator ID
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [createdAt, name]
            default: createdAt
          description: Sort field
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          projects:
                            type: array
                            items:
                              $ref: '#/components/schemas/Project'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new project
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - symbol
                - description
                - category
              properties:
                name:
                  type: string
                  example: "CryptoPunk Project"
                symbol:
                  type: string
                  example: "CPP"
                description:
                  type: string
                  example: "A revolutionary NFT project"
                whitepaper:
                  type: string
                  example: "https://example.com/whitepaper.pdf"
                website:
                  type: string
                  example: "https://cryptopunk.com"
                twitter:
                  type: string
                  example: "https://twitter.com/cryptopunk"
                telegram:
                  type: string
                  example: "https://t.me/cryptopunk"
                discord:
                  type: string
                  example: "https://discord.gg/cryptopunk"
                category:
                  type: string
                  enum: [DeFi, NFT, GameFi, Infrastructure, Metaverse, Other]
                  example: "NFT"
                status:
                  type: string
                  enum: [draft, active]
                  default: draft
                totalSupply:
                  type: string
                  example: "1000000"
                marketCap:
                  type: string
                  example: "$10000000"
                launchDate:
                  type: string
                  format: date
                  example: "2024-01-01"
                tags:
                  type: string
                  example: "nft,blockchain,art"
                logo:
                  type: string
                  format: binary
                  description: Project logo image file
                banner:
                  type: string
                  format: binary
                  description: Project banner image file
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          project:
                            $ref: '#/components/schemas/Project'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Project with same name or symbol exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{id}:
    get:
      summary: Get project by ID (public)
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Project ID
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          project:
                            $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a project
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Project ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                symbol:
                  type: string
                description:
                  type: string
                whitepaper:
                  type: string
                website:
                  type: string
                twitter:
                  type: string
                telegram:
                  type: string
                discord:
                  type: string
                category:
                  type: string
                  enum: [DeFi, NFT, GameFi, Infrastructure, Metaverse, Other]
                status:
                  type: string
                  enum: [draft, active, completed, paused]
                totalSupply:
                  type: string
                marketCap:
                  type: string
                launchDate:
                  type: string
                  format: date
                tags:
                  type: string
                logo:
                  type: string
                  format: binary
                banner:
                  type: string
                  format: binary
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          project:
                            $ref: '#/components/schemas/Project'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to update this project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a project
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Project ID
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to delete this project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/my/projects:
    get:
      summary: Get current user's projects
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 12
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, completed, paused]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: User projects retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          projects:
                            type: array
                            items:
                              $ref: '#/components/schemas/Project'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/my/options:
    get:
      summary: Get project options for dropdown (current user)
      tags:
        - Projects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Project options retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          options:
                            type: array
                            items:
                              $ref: '#/components/schemas/ProjectOption'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}/tokens:
    post:
      summary: Add token to project (after successful web3 creation)
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tokenId
                - name
                - symbol
                - type
                - supply
                - price
                - address
                - network
              properties:
                tokenId:
                  type: string
                  example: "1"
                name:
                  type: string
                  example: "CryptoPunk Token"
                symbol:
                  type: string
                  example: "CPT"
                type:
                  type: string
                  enum: [ERC-20, ERC-721, ERC-1155, Memecoin, Stablecoin]
                  example: "ERC-721"
                supply:
                  type: string
                  example: "10000"
                price:
                  type: string
                  example: "$2500"
                address:
                  type: string
                  example: "0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b"
                network:
                  type: string
                  example: "Ethereum"
                description:
                  type: string
                  example: "A unique digital art token"
                features:
                  type: array
                  items:
                    type: string
                  example: ["Royalty support", "Metadata included"]
                logoUrl:
                  type: string
                  example: "/uploads/token-logo.png"
                backgroundUrl:
                  type: string
                  example: "/uploads/token-bg.jpg"
      responses:
        '200':
          description: Token added to project successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          project:
                            $ref: '#/components/schemas/Project'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to add tokens to this project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Token already exists in this project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # IMAGE SERVING ENDPOINT
  /uploads/{filename}:
    get:
      summary: Serve uploaded images
      tags:
        - Files
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Image filename
      responses:
        '200':
          description: Image served successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid filename
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'